Side code project:
    Code analysis:

        Design:
            Principles:
                Basic:
                    you hand code root directory it hands back results
                    you can save them or not
                    done

            Main - launches gui, gui asks for java root code directory
                stores the root directory in a common area

            Once root directory added and confirmed correct
                make initial pass over all files get non recursive complexity count and other counts
                    get recursive information

            Separate large storage space for all code stat info
                concurrenthashmap
                    main hashmap
                    holds objects that represent the files

            Last step is to analyze the data gotten by the recursive analysis


        look up common java performance pitfalls so my program can look for them


        General:

            record time spent in methods, have a total field

            Index out program so it can refer to other classes:
                -each class has its own object containing all its stats

            Keeps track of line numbers and filename for user feedback

            make multithreaded:
                create a thread for each file / directory whichever is faster:
                    unless performance isn't an issue

            -each entry into the treetable is a file
                the stems from that are methods
                very top level is the program name

            Make the interface a gui
                -fxml
                -start small then build off
                -basic
                -highlighting rules like that of excel green good red bad all in a range 0 -> largest number all rated by the worst info in column
                -has setup section at the bottom of scene, does not grow in height
                -for dynamic the gui is given the path the the jar file
                -gui should be able to launch code / for static just give it the root directory
                    -remembers from last time so you dont have to keep retyping
                -analyzing please wait as you wait for results
                    -give stats after like
                        -analysis took 4.345 seconds
                -basically just a treetable to show results

            be able to save results
                -think about whether it should autocratically save the results to disk though
                    -leaning towards no
            Main things to look for:
                -Object creation
                    -especially inside a loop
                for loops
                while loops
                    -while(true)

            Each method should have a complexity score:
                -these methods are represented by objects that hold stats
                    -stats have creating new objects count
                    -loop complexity
                    -recursively goes down into other methods that are called
                    -file count
                    -method count
                    -class count
                        -can be different than filecount
                    -for loop count
                    -while loop count


        Static:
            have a "Potential Hotspot" detector
            give interesting stats on each file


        Dynamic:
            https://dzone.com/articles/java-profiling-under-covers

            would be cool to have an actual call count

            time spent in each function / method / object type

