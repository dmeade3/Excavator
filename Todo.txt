Side code project:
    Code analysis:

        Design:
            Principles:
                Basic:
                    you hand code root directory it hands back results
                    you can save them or not
                    done

            Main - launches gui, gui asks for java root code directory
                reads in setting from config file

            Once root directory added and confirmed correct
                scan files for complexity info and other info


            be able to change time type to milli, sec, nano, min


        look up common java performance pitfalls so my program can look for them


        General:

            make easier to use on other projects for profiling
                or at least write down process of making the project able to be profiled

            when scrollpane grows scrollbar should stay in the same place

            make section for time assumed in private methods / junk time (total time - main time)

            on close save settings

            Index out program so it can refer to other classes:
                -each class has its own object containing all its stats

            try and get it to where you dont need the outside jar to be compiled with javassist

            Keeps track of line numbers and filename for user feedback for static

            make multithreaded:
                create a thread for each file / directory whichever is faster:
                    unless performance isn't an issue

            Gui columns dont sort right

            specify in gui its using nanos

            on gui use formatted numbers with commas

            cant pick up private methods

            Make the interface a gui
                -highlighting rules like that of excel green good red bad all in a range 0 -> largest number all rated by the worst info in column
                -gui should be able to launch program / for static just give it the root directory
                    -remembers from last time so you dont have to keep retyping

            be able to save results
                -think about whether it should autocratically save the results to disk though
                    -leaning towards no
            Main things to look for:
                -Object creation
                    -especially inside a loop
                for loops
                while loops
                    -while(true)

            Each method should have a complexity score:
                -these methods are represented by objects that hold stats
                    -stats have creating new objects count
                    -loop complexity
                    -recursively goes down into other methods that are called
                    -file count
                    -method count
                    -class count
                        -can be different than filecount
                    -for loop count
                    -while loop count


        Static:
            have a "Potential Hotspot" detector
            give interesting stats on each file
            line count
            total method complexity
            individual method complexity
            for loop count
            while loop count

            popup that says possible problems


        Dynamic:
            https://dzone.com/articles/java-profiling-under-covers

            would be cool to have an actual call count

            time spent in each function / method / object type

            if theres an error a popup box with only the abilty to close it should come up and display the error message

